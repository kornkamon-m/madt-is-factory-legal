__import__('pysqlite3')
import pysqlite3
import sys
sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')


import streamlit as st
import google.generativeai as genai
from langchain.vectorstores import Chroma
from langchain.embeddings import HuggingFaceEmbeddings
import requests
#import sqlite3
#import chromadb


def load_chroma_db():
    # Load the Chroma database
    embeddings = HuggingFaceEmbeddings()
    vectorstore = Chroma(embedding_function=embeddings)
    return vectorstore


def similarity_search(query, vectorstore):
    # Perform a similarity search
    results = vectorstore.similarity_search(query)
    return results


# Sidebar Navigation
with st.sidebar:
    st.title("üè≠")
    st.title("**AI Advisory for Factory Legal**")
    if "page" not in st.session_state:
        st.session_state.page = "Home"
   
    if st.button("Home"):
        st.session_state.page = "Home"
    if st.button("Legal Guidance"):
        st.session_state.page = "Legal Guidance"
    if st.button("Q&A Chatbot"):
        st.session_state.page = "Q&A Chatbot"
       
# Page Functions
def home_page_view():
    st.title("üè≠")
    st.title("AI Advisory for Food Factory Setup")
    st.write("‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢")
    st.image(
        "https://img.freepik.com/free-vector/food-manufacturing-illustration_23-2149513856.jpg?semt=ais_hybrid",  # Replace with the URL of an industrial park image in Thailand
        #use_container_width=True
    )
    st.info("""
        Welcome to the AI Advisory system for Thailand's food factory legal guidance.
        This platform leverages Retrieval-Augmented Generation (RAG) technology and Generative AI to:
       
        - Provide clear and accurate legal guidance for food factory licenses.
        - Simplify regulatory processes.
        - Empower users with real-time legal assistance through an intelligent chatbot.
    """)


def legal_guidance_page():
    st.title("Legal Guidance for Food Factory")
    st.write("Provide details about your factory to receive tailored guidance.")


    # Load Vector Database
    chroma_db = load_chroma_db()


    # Input form for user details
    with st.form("factory_form"):
        factory_type = st.text_input("Enter Food Factory Type:")
        machine_power = st.number_input("Machine Power (HP):", min_value=0, step=1)
        employee = st.number_input("Number of Employees:", min_value=0, step=1)
        submit_button = st.form_submit_button("Get Guidance")

  with st.write("### Legal Guidance:")
        st.write("""
1. ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ï‡∏≤‡∏° TSIC ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:
   - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ
   - ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ï‡∏≤‡∏° TSIC: ‡∏´‡∏°‡∏ß‡∏î 1013 - ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ ‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏™‡πâ‡∏Å‡∏£‡∏≠‡∏Å

2. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:
   - ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç ‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà 234 (‡∏û.‡∏®. 2544) ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
   - ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç ‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà 159 (‡∏û.‡∏®. 2536) ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ

3. ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏î:
   - ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤:
     - ‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£: 44 ‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤
     - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: 7 ‡∏Ñ‡∏ô
   - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠: ‡πÅ‡∏ö‡∏ö ‡∏≠.1 (‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Å‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏¢‡∏≤)

4. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï:
   - ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô (‡∏≠.1)
   - ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
   - ‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
   - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤
   - ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
   - ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
   - ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠
        """)
    if submit_button:
        st.write("### Your Factory Details:")
        st.write(f"**Factory Type:** {factory_type}")
        st.write(f"**Machine Power:** {machine_power} HP")
        st.write(f"**Number of Employees:** {employee}")


        # Similarity Search
        tsic_results = similarity_search(factory_type, chroma_db)
        food_law_results = similarity_search(factory_type, chroma_db)


        # Use Google Gemini to Generate Display Results
        #with st.spinner("Generating insights with Generative AI..."):
        #    api_key = st.secrets.get("gemini_api_key", "AIzaSyBnlQoQBbgfUgJwkTyHZ7l1ZMXDx7L3hAg")  # Replace with actual API key or config
        #    headers = {"Authorization": f"Bearer {api_key}"}


        try:
            gemini_api_key = st.secrets.get("gemini_api_key", "AIzaSyBnlQoQBbgfUgJwkTyHZ7l1ZMXDx7L3hAg")  # Replace with your actual key
            genai.configure(api_key=gemini_api_key)
            model = genai.GenerativeModel("gemini-pro")  # Use your specific Gemini model
            generation_config = { 
                "temperature" : 0.9 , 
                "top_p" : 1 , 
                "top_k" : 1 , 
                "max_output_tokens" : 2048 , 
} 
            st.success("Gemini API Key successfully configured.")


            prompt = f"""
‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
- ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å TSIC: {[result['content'] for result in tsic_results]}
- ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (Food Law): {[result['content'] for result in food_law_results]}
- ‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£: {machine_power} ‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: {employee} ‡∏Ñ‡∏ô


‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
1. ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ï‡∏≤‡∏° TSIC ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
2. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
3. ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏î (‡∏£‡∏á.4 ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠.1) ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
4. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß
"""
             # Generate Response
             
            #response = genai.generate_context(model="gemini-pro", prompt=prompt, max_tokens=300)
            response = model.generate_context(prompt)
            st.write("### Legal Guidance:")
            st.write(response.result)


        except Exception as e:
            st.error(f"An error occurred while setting up the Gemini model: {e}")


def qa_chatbot_page():
    st.title("Q&A Chatbot")
    st.write("Ask questions about food factory regulations. The chatbot retrieves information from a vector database and uses GenAI (Gemini) for intelligent responses.")


    # Chatbot interface
    with st.form("chat_form"):
        user_query = st.text_input("Ask your legal question:")
        submit_chat = st.form_submit_button("Get Answer")


    if submit_chat:
        if user_query:
            # Simulated retrieval and AI response
            with st.spinner("Retrieving and generating answer..."):
                api_key = st.secrets.get("gemini_api_key", "AIzaSyBnlQoQBbgfUgJwkTyHZ7l1ZMXDx7L3hAg")  # Replace with actual API key or config
                headers = {"Authorization": f"Bearer {api_key}"}
                payload = {
                    "prompt": f"""
                    Retrieve information and provide an answer to the following question:
                    {user_query}
                    """,
                    "max_tokens": 200,
                }
                # Example API call (replace with real endpoint)
                try:
                    response = requests.post("https://api.example.com/generate", headers=headers, json=payload)
                    if response.status_code == 200:
                        st.write("### Answer:")
                        st.write(response.json().get("output", "No data found."))
                    else:
                        st.error(f"Error: {response.status_code} - {response.text}")
                except Exception as e:
                    st.error(f"An error occurred: {e}")
        else:
            st.warning("Please enter a question.")


# Main Function
def main():


    if st.session_state.page == "Home":
        home_page_view()
    elif st.session_state.page == "Legal Guidance":
        legal_guidance_page()
    elif st.session_state.page == "Q&A Chatbot":
        qa_chatbot_page()


if __name__ == '__main__':
    main()
